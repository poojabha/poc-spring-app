AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::CodeStar

Conditions:
  UseSubnet: !Not [!Equals [!Ref 'SubnetId', subnet-none]]
  isProduction: !Equals [ !Ref Stage, 'production']
  isDevelopment: !Not [!Equals [!Ref Stage, 'production']]

Parameters:
  ProjectId:
    Type: String
    Description: AWS CodeStar project ID used to name project resources and create roles.
  InstanceType:
    Type: String
    Description: The type of Amazon EC2 Linux instances that will be launched for this project.
  KeyPairName:
    Type: String
    Description: The name of an existing Amazon EC2 key pair in the region where the project is created, which you can use to SSH into the new Amazon EC2 Linux instances.
  VpcId:
    Type: String
    Description: The ID of the Amazon Virtual Private Cloud (VPC) used for the new Amazon EC2 Linux instances.
  SubnetId:
    Type: String
    Description: The name of the VPC subnet used for the new Amazon EC2 Linux instances launched for this project.
  SolutionStackName:
    Type: String
    Description: The software stack used to launch environments and configure instances in AWS Elastic Beanstalk.
  EBTrustRole:
    Type: String
    Description: The service role in IAM for AWS Elastic Beanstalk to be created for this project.
  EBInstanceProfile:
    Type: String
    Description: The IAM role that will be created for the Amazon EC2 Linux instances.
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    AllowedValues:
      - dev
      - integration
      - staging
      - production
    Default: dev
  SubnetB:
    Type: AWS::EC2::Subnet::Id
  Image:
    Type: String
    Description: Docker repository ARN with tag.
  ServiceName:
    Type: String
    Default: codestar
  ContainerPort:
    Type: Number
  HealthCheckPath:
    Type: String
    Default: /health
  MinContainers:
    Type: Number
    Default: 2
  MaxContainers:
    Type: Number
    Default: 10
  AutoScalingTargetValue:
    Type: Number
    Default: 50
  ExecutionRole:
    Type: String
    Description: Role needed by ECS and containers
    Default: arn:aws:iam::755242612616:role/poc-ecs-task-role
  AutoscalingRole:
    Type: String
    Description: Role need for autoscaling
    Default: arn:aws:iam::755242612616:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
  TargetGroupARN:
    Type: String
    Description: Target group ARN for the service
  LoadBalancerPortHTTP:
    Type: Number
    Default: 80
  LoadBalancerPortHTTPS:
    Type: Number
    Default: 443
  CertificateARN:
    Type: String
    Description: The ARN of the Amazon Certificate Manager
    Default: arn:aws:acm:us-west-2:755242612616:certificate/eea725ed-77c6-47b8-bac8-730b3d29b39e
  HealthCheckIntervalSeconds:
    Type: Number
    Default: 30
  ClusterARN:
    Type: String
    Default: arn:aws:ecs:us-west-2:755242612616:cluster/poc-codestar-development
  CPU:
    Type: String
    Description: The number of CPU units
    Default: 256
    AllowedValues:
      - 256
      - 512
      - 1024
      - 2048
      - 4096
  Memory:
    Type: String
    Description: The Amount of memory used by the task
    Default: 0.5GB
    AllowedValues:
      - 0.5GB
      - 1GB
      - 2GB
      - 3GB
      - 4GB
      - 5GB
      - 6GB
  LoadBalancerSecurityGroupId:
    Type: String
    Description: Security group Id of the loadbalancer
Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Condition: isProduction
    Properties:
      ClusterName: !Join ['-', [!Ref ServiceName, cluster, production]]
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: LogGroup
    Properties:
      Family: !Join ['-', [!Ref ServiceName, td, !Ref Stage]]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref CPU
      Memory: !Ref Memory
      ExecutionRoleArn: !Ref ExecutionRole
      TaskRoleArn: !Ref ExecutionRole
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref Image
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          # Send logs to CloudWatch Logs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: isProduction
    Properties:
      GroupName: !Join ['-', [!Ref ServiceName, sg, production]]
      GroupDescription: !Join [' ', [!Ref ServiceName, sg, production]]
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref LoadBalancerPortHTTP
          ToPort: !Ref LoadBalancerPortHTTP
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: !Ref LoadBalancerPortHTTP
          ToPort: !Ref LoadBalancerPortHTTP
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: !Ref LoadBalancerPortHTTPS
          ToPort: !Ref LoadBalancerPortHTTPS
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: !Ref LoadBalancerPortHTTPS
          ToPort: !Ref LoadBalancerPortHTTPS
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          CidrIpv6: ::/0
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ['-', [!Ref ServiceName, sg, !Ref Stage]]
      GroupDescription: !Join [' ', [!Ref ServiceName, sg, !Ref Stage]]
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref LoadBalancerPortHTTP
          ToPort: !Ref LoadBalancerPortHTTP
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: !Ref LoadBalancerPortHTTP
          ToPort: !Ref LoadBalancerPortHTTP
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !If [isProduction, !Ref LoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroupId]
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: isProduction
    Properties:
      HealthCheckIntervalSeconds: !Ref HealthCheckIntervalSeconds
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Join ['-', [!Ref ServiceName, tg, production]]
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId: !Ref VpcId
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: isProduction
    Properties:
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
      Name: !Join ['-', [!Ref ServiceName, alb, !Ref Stage]]
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref SubnetId
        - !Ref SubnetB
  ListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: isProduction
    Properties:
     DefaultActions:
       - Type: redirect
         RedirectConfig:
           Protocol: HTTPS
           Port: 443
           Host: "#{host}"
           Path: "/#{path}"
           Query: "#{query}"
           StatusCode: "HTTP_301"
     LoadBalancerArn: !Ref LoadBalancer
     Port: !Ref LoadBalancerPortHTTP
     Protocol: HTTP
  ListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: isProduction
    Properties:
     DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
     Certificates:
        - CertificateArn: !Ref CertificateARN
     LoadBalancerArn: !Ref LoadBalancer
     Port: !Ref LoadBalancerPortHTTPS
     Protocol: HTTPS
  productionService:
    Type: AWS::ECS::Service
    # This dependency is needed so that the load balancer is setup correctly in time
    Condition: isProduction
    DependsOn:
      - ListenerHTTPS
      - ListenerHTTP
    Properties:
      ServiceName: !Join ['-', [!Ref ServiceName, service, production]]
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      # This may need to be adjusted if the container takes a while to start up
      HealthCheckGracePeriodSeconds: !Ref HealthCheckIntervalSeconds
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SubnetId
            - !Ref SubnetB
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup
  developmentService:
    Type: AWS::ECS::Service
    # This dependency is needed so that the load balancer is setup correctly in time
    Condition: isDevelopment
    Properties: 
      ServiceName: !Join ['-', [!Ref ServiceName, service, !Ref Stage]]
      Cluster: !Ref ClusterARN
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      # This may need to be adjusted if the container takes a while to start up
      HealthCheckGracePeriodSeconds: !Ref HealthCheckIntervalSeconds
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SubnetId
            - !Ref SubnetB
          SecurityGroups:
            - !Ref LoadBalancerSecurityGroupId
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroupARN
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', [/ecs, !Ref ServiceName, log-group, !Ref Stage]]
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join ['/', [service, !If [isProduction, !Ref Cluster, !Ref ClusterARN], !If [isProduction, !GetAtt productionService.Name, !GetAtt developmentService.Name]]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that allows Application Auto Scaling to modify your scalable target."
      RoleARN: !Ref AutoscalingRole
  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['-', [!Ref ServiceName, AutoScalingPolicy, !Ref Stage]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        TargetValue: !Ref AutoScalingTargetValue
